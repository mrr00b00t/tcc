from pymoo.core.problem import ElementwiseProblem
import numpy as np
from sklearn.metrics import  balanced_accuracy_score, roc_auc_score
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import LeaveOneOut
from sklearn.metrics import pairwise_distances


class MyProblem(ElementwiseProblem):

    def __init__(self, **kwargs):
        self.X = np.array([[48.0,23.5,70.0,2.707,0.467408667,8.8071,9.7024,7.99585,417.114],[83.0,20.69049454,92.0,3.115,0.706897333,8.8438,5.429285,4.06405,468.786],[82.0,23.12467037,91.0,4.498,1.009651067,17.9393,22.43204,9.27715,554.697],[68.0,21.36752137,77.0,3.226,0.612724933,9.8827,7.16956,12.766,928.22],[86.0,21.11111111,92.0,3.549,0.8053864,6.6994,4.81924,10.57635,773.92],[49.0,22.85445769,92.0,3.226,0.732086933,6.8317,13.67975,10.3176,530.41],[89.0,22.7,77.0,4.69,0.890787333,6.964,5.589865,12.9361,1256.083],[76.0,23.8,118.0,6.47,1.883201333,4.311,13.25132,5.1042,280.694],[73.0,22.0,97.0,3.35,0.801543333,4.47,10.358725,6.28445,136.855],[75.0,23.0,83.0,4.952,1.013839467,17.127,11.57899,7.0913,318.302],[34.0,21.47,78.0,3.469,0.6674356,14.57,13.11,6.92,354.6],[29.0,23.01,82.0,5.663,1.145436133,35.59,26.72,4.58,174.8],[25.0,22.86,82.0,4.09,0.827270667,20.45,23.67,5.14,313.73],[24.0,18.67,88.0,6.107,1.33,8.88,36.06,6.85,632.22],[38.0,23.34,75.0,5.782,1.06967,15.26,17.95,9.35,165.02],[44.0,20.76,86.0,7.553,1.6,14.09,20.32,7.64,63.61],[47.0,22.03,84.0,2.869,0.59,26.65,38.04,3.32,191.72],[61.0,32.03895937,85.0,18.077,3.790144333,30.7729,7.780255,13.68392,444.395],[64.0,34.5297228,95.0,4.427,1.037393667,21.2117,5.46262,6.70188,252.449],[32.0,36.51263743,87.0,14.026,3.0099796,49.3727,5.1,17.10223,588.46],[36.0,28.57667585,86.0,4.345,0.921719333,15.1248,8.6,9.1539,534.224],[34.0,31.97501487,87.0,4.53,0.972138,28.7502,7.64276,5.62592,572.783],[29.0,32.27078777,84.0,5.81,1.203832,45.6196,6.209635,24.6033,904.981],[35.0,30.27681661,84.0,4.376,0.9067072,39.2134,9.048185,16.43706,733.797],[54.0,30.48315806,90.0,5.537,1.229214,12.331,9.73138,10.19299,1227.91],[45.0,37.03560819,83.0,6.76,1.383997333,39.9802,4.617125,8.70448,586.173],[50.0,38.57875854,106.0,6.703,1.752611067,46.6401,4.667645,11.78388,887.16],[66.0,31.44654088,90.0,9.245,2.05239,45.9624,10.35526,23.3819,1102.11],[35.0,35.2507611,90.0,6.817,1.513374,50.6094,6.966895,22.03703,667.928],[36.0,34.17489,80.0,6.59,1.300426667,10.2809,5.065915,15.72187,581.313],[66.0,36.21227888,101.0,15.533,3.869788067,74.7069,7.53955,22.32024,864.968],[53.0,36.7901662,101.0,10.175,2.534931667,27.1841,20.03,10.26309,695.754],[28.0,35.85581466,87.0,8.576,1.8404096,68.5102,4.7942,21.44366,358.624],[43.0,34.42217362,89.0,23.194,5.091856133,31.2128,8.300955,6.71026,960.246],[51.0,27.68877813,77.0,3.855,0.732193,20.092,3.19209,10.37518,473.859],[67.0,29.60676726,79.0,5.819,1.133929133,21.9033,2.19428,4.2075,585.307],[66.0,31.2385898,82.0,4.181,0.845676933,16.2247,4.267105,3.29175,634.602],[69.0,35.09270153,101.0,5.646,1.4066068,83.4821,6.796985,82.1,263.499],[60.0,26.34929208,103.0,5.138,1.305394533,24.2998,2.19428,20.2535,378.996],[77.0,35.58792924,76.0,3.881,0.727558133,21.7863,8.12555,17.2615,618.272],[76.0,29.2184076,83.0,5.376,1.1006464,28.562,7.36996,8.04375,698.789],[76.0,27.2,94.0,14.07,3.262364,35.891,9.34663,8.4156,377.227],[75.0,27.3,85.0,5.197,1.089637667,10.39,9.000805,7.5767,335.393],[69.0,32.5,93.0,5.43,1.245642,15.145,11.78796,11.78796,270.142],[71.0,30.3,102.0,8.34,2.098344,56.502,8.13,4.2989,200.976],[66.0,27.7,90.0,6.042,1.341324,24.846,7.652055,6.7052,225.88],[75.0,25.7,94.0,8.079,1.8732508,65.926,3.74122,4.49685,206.802],[78.0,25.3,60.0,3.508,0.519184,6.633,10.567295,4.6638,209.749],[69.0,29.4,89.0,10.704,2.3498848,45.272,8.2863,4.53,215.769],[85.0,26.6,96.0,4.462,1.0566016,7.85,7.9317,9.6135,232.006],[76.0,27.1,110.0,26.211,7.111918,21.778,4.935635,8.49395,45.843],[77.0,25.9,85.0,4.58,0.960273333,13.74,9.75326,11.774,488.829],[45.0,21.30394858,102.0,13.852,3.4851632,7.6476,21.056625,23.03408,552.444],[45.0,20.82999519,74.0,4.56,0.832352,7.7529,8.237405,28.0323,382.955],[49.0,20.9566075,94.0,12.305,2.853119333,11.2406,8.412175,23.1177,573.63],[34.0,24.24242424,92.0,21.699,4.9242264,16.7353,21.823745,12.06534,481.949],[42.0,21.35991456,93.0,2.999,0.6879706,19.0826,8.462915,17.37615,321.919],[68.0,21.08281329,102.0,6.2,1.55992,9.6994,8.574655,13.74244,448.799],[51.0,19.13265306,93.0,4.364,1.0011016,11.0816,5.80762,5.57055,90.6],[62.0,22.65625,92.0,3.482,0.790181867,9.8648,11.236235,10.69548,703.973],[38.0,22.4996371,95.0,5.261,1.232827667,8.438,4.77192,15.73606,199.055],[69.0,21.51385851,112.0,6.683,1.846290133,32.58,4.138025,15.69876,713.239],[49.0,21.36752137,78.0,2.64,0.507936,6.3339,3.886145,22.94254,737.672],[51.0,22.89281998,103.0,2.74,0.696142667,8.0163,9.349775,11.55492,359.232],[59.0,22.83287935,98.0,6.862,1.658774133,14.9037,4.230105,8.2049,355.31],[45.0,23.14049587,116.0,4.902,1.4026256,17.9973,4.294705,5.2633,518.586],[54.0,24.21875,86.0,3.73,0.791257333,8.6874,3.70523,10.34455,635.049],[64.0,22.22222222,98.0,5.7,1.37788,12.1905,4.783985,13.91245,395.976],[46.0,20.83,88.0,3.42,0.742368,12.87,18.55,13.56,301.21],[44.0,19.56,114.0,15.89,4.468268,13.08,20.37,4.62,220.66],[45.0,20.26,92.0,3.44,0.780650667,7.65,16.67,7.84,193.87],[44.0,24.74,106.0,58.46,15.28534133,18.16,16.1,5.31,244.75],[51.0,18.37,105.0,6.03,1.56177,9.62,12.76,3.21,513.66],[72.0,23.62,105.0,4.42,1.14478,21.78,17.86,4.82,195.94],[46.0,22.21,86.0,36.94,7.836205333,10.16,9.76,5.68,312.0],[43.0,26.5625,101.0,10.555,2.629602333,9.8,6.420295,16.1,806.724],[55.0,31.97501487,92.0,16.635,3.775036,37.2234,11.018455,7.16514,483.377],[43.0,31.25,103.0,4.328,1.099600533,25.7816,12.71896,38.6531,775.322],[86.0,26.66666667,201.0,41.611,20.6307338,47.647,5.357135,24.3701,1698.44],[41.0,26.6727633,97.0,22.033,5.271762467,44.7059,13.494865,27.8325,783.796],[59.0,28.67262608,77.0,3.188,0.605507467,17.022,16.44048,31.6904,910.489],[81.0,31.64036818,100.0,9.669,2.38502,38.8066,10.636525,29.5583,426.175],[48.0,32.46191136,99.0,28.677,7.0029234,46.076,21.57,10.15726,738.034],[71.0,25.51020408,112.0,10.395,2.871792,19.0653,5.4861,42.7447,799.898],[42.0,29.296875,98.0,4.172,1.008511467,12.2617,6.695585,53.6717,1041.843],[65.0,29.666548,85.0,14.649,3.071407,26.5166,7.28287,19.46324,1698.44],[48.0,28.125,90.0,2.54,0.56388,15.5325,10.22231,16.11032,1698.44],[85.0,27.68877813,196.0,51.814,25.05034187,70.8824,7.901685,55.2153,1078.359],[48.0,31.25,199.0,12.162,5.9699204,18.1314,4.104105,53.6308,1698.44],[58.0,29.15451895,139.0,16.582,5.685415067,22.8884,10.26266,13.97399,923.886],[40.0,30.83653053,128.0,41.894,13.22733227,31.0385,6.160995,17.55503,638.261],[82.0,31.21748179,100.0,18.077,4.458993333,31.6453,9.92365,19.94687,994.316],[52.0,30.8012487,87.0,30.212,6.4834952,29.2739,6.26854,24.24591,764.667],[49.0,32.46191136,134.0,24.887,8.225983067,42.3914,10.79394,5.768,656.393],[60.0,31.23140988,131.0,30.13,9.736007333,37.843,8.40443,11.50005,396.021],[49.0,29.77777778,70.0,8.396,1.449709333,51.3387,10.73174,20.76801,602.486],[44.0,27.88761707,99.0,9.208,2.2485936,12.6757,5.47817,23.03306,407.206],[40.0,27.63605442,103.0,2.432,0.617890133,14.3224,6.78387,26.0136,293.123],[71.0,27.91551882,104.0,18.2,4.668906667,53.4997,1.65602,49.24184,256.001],[69.0,28.44444444,108.0,8.808,2.3464512,14.7485,5.288025,16.48508,353.568],[74.0,28.65013774,88.0,3.012,0.6538048,31.1233,7.65222,18.35574,572.401],[66.0,26.5625,89.0,6.524,1.432235467,14.9084,8.42996,14.91922,269.487],[65.0,30.91557669,97.0,10.491,2.5101466,44.0217,3.71009,20.4685,396.648],[72.0,29.13631634,83.0,10.949,2.241625267,26.8081,2.78491,14.76966,232.018],[57.0,34.83814777,95.0,12.548,2.940414667,33.1612,2.36495,9.9542,655.834],[73.0,37.109375,134.0,5.636,1.862885867,41.4064,3.335665,6.89235,788.902],[45.0,29.38475666,90.0,4.713,1.046286,23.8479,6.644245,15.55625,621.273],[46.0,33.18,92.0,5.75,1.304866667,18.69,9.16,8.89,209.19],[68.0,35.56,131.0,8.15,2.633536667,17.87,11.9,4.19,198.4],[75.0,30.48,152.0,7.01,2.628282667,50.53,10.06,11.73,99.45],[54.0,36.05,119.0,11.91,3.495982,89.27,8.01,5.06,218.28],[45.0,26.85,92.0,3.33,0.755688,54.68,12.1,10.96,268.23],[62.0,26.84,100.0,4.53,1.1174,12.45,21.42,7.32,330.16],[65.0,32.05,97.0,5.73,1.370998,61.48,22.54,10.33,314.05],[72.0,25.59,82.0,2.82,0.570392,24.96,33.75,3.27,392.46],[86.0,27.18,138.0,19.91,6.777364,90.28,14.11,4.35,90.09]])
        self.y = np.array([-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0])
        
        self.dt_iter = 1. / self.y.shape[0]
        
        super().__init__(n_var=7, n_obj=1, n_ieq_constr=0, xl=0., xu=1., elementwise_evaluation=True, **kwargs)

    def _ml_test(self, f, C):
        skf = StratifiedKFold(n_splits=10, random_state=np.random.randint(10000, size=1)[0], shuffle=True)
        #loo = LeaveOneOut()
        results = []
        iters = []

        for i, (train_index, test_index) in enumerate(skf.split(self.X, self.y)):
            X_train, X_test = self.X[train_index], self.X[test_index]
            y_train, y_test = self.y[train_index], self.y[test_index]
            
            scaler  = StandardScaler()
            X_train = scaler.fit_transform(X_train)
            X_test  = scaler.transform(X_test)
            
            svc = SVC(C=C, kernel='precomputed')#, probability=True)
            kernel_train = f(np.dot(X_train, X_train.T))
            #kernel_train = f(pairwise_distances(X_train, X_train) ** 2)
            svc.fit(kernel_train, y_train)
            kernel_test = f(np.dot(X_test, X_train.T))
            #kernel_test = f(pairwise_distances(X_test, X_train) ** 2)
            y_pred = svc.predict(kernel_test)
            
            #results.append(y_test[0] == y_pred[0])
            iters.append(svc.n_iter_[0])
            results.append(balanced_accuracy_score(y_test, y_pred))
            #iters.append(svc.n_iter_[0])
            #roc_aucs.append(roc_auc_score(y_test,svc.predict_proba(kernel_test)[:, 1]))
        
        return -np.mean(results) + (np.mean(iters) / 10000000 ) * self.dt_iter

    def _evaluate(self, x, out, *args, **kwargs):
        z = x.copy()
        z = z + z*0.017*np.random.randint(low=-1, high=2, size=x.shape[0]) # salt step
        z = (z - 0.5) * 50.
        z[-1] += 250
        f = lambda M: (z[1] + z[2]*(M-z[0]) + z[3]*((M-z[0])**2)) / (1 + z[4]*(M-z[0]) + z[5]*((M-z[0])**2))
        
        ml_test0 = self._ml_test(f, z[-1])
        #ml_test1 = self._ml_test(f, z[-1])
        out['F'] = [ml_test0]
        #out["F"] = [(ml_test0 + ml_test1) / 2]
         
from multiprocessing.pool import ThreadPool
from pymoo.core.problem import StarmapParallelization
from pymoo.algorithms.soo.nonconvex.ga import GA
from pymoo.algorithms.soo.nonconvex.brkga import BRKGA
from pymoo.optimize import minimize
from pymoo.visualization.scatter import Scatter
from pymoo.algorithms.soo.nonconvex.de import DE
from pymoo.algorithms.moo.nsga2 import NSGA2
from matplotlib import pyplot as plt
from pymoo.operators.sampling.lhs import LHS
from pymoo.algorithms.soo.nonconvex.pso import PSO


for i in range(1):
    # initialize the thread pool and create the runner
    n_threads = 20
    with ThreadPool(n_threads) as pool:
        runner = StarmapParallelization(pool.starmap)

        # define the problem by passing the starmap interface of the thread pool
        problem = MyProblem(elementwise_runner=runner)
        
        # define the algorithm to be used
        algorithm2 = BRKGA(
            n_elites=40,
            n_offsprings=280,
            n_mutants=80,
            bias=0.85,
            sampling=LHS()
        )
        
        algorithm = NSGA2(pop_size=300,
                    eliminate_duplicates=True)
        
        de = DE(
            pop_size=150,
            sampling=LHS(),
            variant="DE/rand/1/bin",
            CR=0.3,
            dither="vector",
            jitter=False
        )
        
        pso = PSO(
            pop_size=300
        )

        seed = np.random.randint(10000, size=1)[0]
        print(50*'=')
        print('Seed:', seed)
        res = minimize(problem, pso, termination=("n_gen", 350), seed=seed, verbose=True, save_history=False)
        print('Threads:', res.exec_time/60.)
        #print('Best solution:', res.X)
        print(50*'=')
        
        #print(res.F)
        
    #x = [u[0] for u in res.F]
    #y = [u[1] for u in res.F]
    #argminy = np.argmin(y)
    
    #print(y[argminy])
    #print(res.X[argminy])
    #plt.scatter(x, y)
    #plt.savefig(f"saida_teste_pos.png")
    argminf = np.argmin(res.F)
    print(res.F[argminf])
    print(res.X)
    
    results = []
    
    for Acc, Xsol in zip(res.pop.get('F'), res.pop.get('X')):
        Accs = []
        
        for _ in range(30):
            mp = MyProblem()
            d = {}
            mp._evaluate(res.X, d)
            Accs.append(d['F'][0])
            
        results.append(
            (Acc[0], np.abs(Acc[0] - np.mean(Accs)), Xsol)
        )
    
    results.sort(key=lambda x: x[0])
    print(results[:10])
    
    results.sort(key=lambda x: x[1])
    print(results[:10])